/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package remind;

import java.awt.Color;
import java.io.IOException;
import java.util.Random;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Seven7
 */
public class GameScreen extends javax.swing.JPanel {

    /**
     * Creates new form GameScreen
     */
    public JFrame parent;
    private GameEngine engine;
    private final int ESSAIS = 3;
    private GameData data;
    private int minRange = 1;
    private int easyMaxRange = 10;
    private int mediumMaxRange = 20;
    private int hardMaxRange = 50;
    private int extremeMaxRange = 1000;
    private boolean isPlayer1Turn = true;
    public int timeLimit = 10;
    public String[] appreciations = {"Magic!", "Born Medium!", "Future Spy!", "You got it like a pro!", "Unstoppable"};

    public int numberToFind;

    public GameScreen(JFrame parent, GameData data) throws InterruptedException, ExecutionException {
        initComponents();
        this.data = data;
        Player p1 = new Player();
        p1.setName(data.getPlayers1());
        p1.setEssais(this.ESSAIS);
        p1.setScore(0);
        Player p2 = new Player();
        p2.setName(data.getPlayers2());
        p2.setEssais(this.ESSAIS);
        p2.setScore(0);
        this.engine = new GameEngine(data.getGameMode(), p1, p2);
        this.parent = parent;
        playerName.setText(data.getPlayers1());
        player1Score.setText("0");
        jLabel7.setText("Aucun.");
        chance.setText("x" + this.ESSAIS + "");

        jTextField1.setToolTipText("Réponse");

        this.generateNumber();

        playerTwoName.setText(data.getPlayers2());
        chancesJ2.setText(this.ESSAIS + "");
        combosJ2.setText("Aucune");
        scoreJ2.setText("0");

        if (!"Mode VS".equals(data.getGameMode())) {
            player2Panel.setVisible(false);
        }
        
        //new Helper();
    }

    public void generateNumber() {
        switch (data.getDifficulty()) {
            case "Facile":
                indicationMessage.setText("Le nombre est généré entre " + this.minRange + " et " + this.easyMaxRange);
                engine.generateNumber(this.minRange, this.easyMaxRange);
                break;
            case "Moyen":
                indicationMessage.setText("Le nombre est généré entre " + this.minRange + " et " + this.mediumMaxRange);
                engine.generateNumber(this.minRange, this.mediumMaxRange);
                break;
            case "Difficile":
                indicationMessage.setText("Le nombre est généré entre " + this.minRange + " et " + this.hardMaxRange);
                engine.generateNumber(this.minRange, this.hardMaxRange);
                break;
            case "Extrême":
                indicationMessage.setText("Le nombre est généré entre " + this.minRange + " et " + this.extremeMaxRange);
                engine.generateNumber(this.minRange, this.extremeMaxRange);
                break;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        playerName = new javax.swing.JLabel();
        chance = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        player1Score = new javax.swing.JLabel();
        player2Panel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        playerTwoName = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        chancesJ2 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        combosJ2 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        scoreJ2 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        indicationMessage = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setBackground(new java.awt.Color(0, 0, 51));
        setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Vivaldi", 2, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Riddle");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(jLabel1, gridBagConstraints);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel3.setFont(new java.awt.Font("Tekton Pro Cond", 0, 18)); // NOI18N
        jLabel3.setText("Joueur 1 : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jLabel3, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Tekton Pro Cond", 0, 16)); // NOI18N
        jLabel4.setText("Essais restants : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jLabel4, gridBagConstraints);

        jLabel5.setText("Combos :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jLabel5, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel6.setText("Score : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jLabel6, gridBagConstraints);

        playerName.setText(" ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(playerName, gridBagConstraints);

        chance.setIcon(new javax.swing.ImageIcon(getClass().getResource("/remind/assets/heart.png"))); // NOI18N
        chance.setText(" ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(chance, gridBagConstraints);

        jLabel7.setText(" ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jLabel7, gridBagConstraints);

        player1Score.setText(" ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(player1Score, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel4.add(jPanel2, gridBagConstraints);

        player2Panel.setBackground(new java.awt.Color(255, 255, 255));
        player2Panel.setLayout(new java.awt.GridBagLayout());

        jLabel2.setFont(new java.awt.Font("Tekton Pro Cond", 0, 18)); // NOI18N
        jLabel2.setText("Joueur 2 : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        player2Panel.add(jLabel2, gridBagConstraints);

        playerTwoName.setText(" ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        player2Panel.add(playerTwoName, gridBagConstraints);

        jLabel9.setFont(new java.awt.Font("Tekton Pro Cond", 0, 16)); // NOI18N
        jLabel9.setText("Essais restants : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        player2Panel.add(jLabel9, gridBagConstraints);

        chancesJ2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/remind/assets/heart.png"))); // NOI18N
        chancesJ2.setText(" ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        player2Panel.add(chancesJ2, gridBagConstraints);

        jLabel11.setText("Combos : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        player2Panel.add(jLabel11, gridBagConstraints);

        combosJ2.setText(" ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        player2Panel.add(combosJ2, gridBagConstraints);

        jLabel13.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel13.setText("Score : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        player2Panel.add(jLabel13, gridBagConstraints);

        scoreJ2.setText(" ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        player2Panel.add(scoreJ2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel4.add(player2Panel, gridBagConstraints);

        jPanel5.setBackground(new java.awt.Color(0, 0, 51));
        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel5.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel5.add(jTextField1, gridBagConstraints);

        indicationMessage.setForeground(new java.awt.Color(255, 255, 255));
        indicationMessage.setText("jLabel8");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel5.add(indicationMessage, gridBagConstraints);

        jButton1.setBackground(new Color(255, 255, 255, 0));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/remind/assets/ok_btn.png"))); // NOI18N
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 150, 5, 150);
        jPanel5.add(jButton1, gridBagConstraints);

        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        jPanel5.add(jLabel8, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        jPanel5.add(jLabel10, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jPanel5, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jPanel4, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    public int getMaxRange(String gameMode) {
        switch (data.getDifficulty()) {
            case "Facile":
                return this.easyMaxRange;
            case "Moyen":
                return this.mediumMaxRange;
            case "Difficile":
                return this.hardMaxRange;
            case "Extrême":
                return this.extremeMaxRange;
        }
        return 0;
    }

    public String congratulate() {
        Random r = new Random();
        return this.appreciations[r.nextInt(this.appreciations.length)];
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int answer = 0;
        try {
            answer = Integer.parseInt(jTextField1.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Le nombre n'est pas valide", "Erreur", JOptionPane.ERROR_MESSAGE);
            jTextField1.setText("");
            return;
        }
        String response = "";

        if ("Mode Solo".equals(this.data.getGameMode())) {
            try {
                response = engine.validate(answer, GameEngine.PLAYER1_TYPE);
            } catch (IOException ex) {
                Logger.getLogger(GameScreen.class.getName()).log(Level.SEVERE, null, ex);
            }
            switch (response) {
                case GameEngine.SUCCESS: //en cas de réussite
                    JOptionPane.showMessageDialog(this, this.congratulate() + "\n Next");
                    engine.generateNumber(minRange, this.getMaxRange(engine.getGameMode()));
                    this.player1Score.setText(engine.getPlayer1().getScore() + "");
                    engine.getPlayer1().setEssais(this.ESSAIS);
                    this.chance.setText("x" + engine.getPlayer1().getEssais() + "");
                    break;
                case GameEngine.FAIL:
                    String position = (engine.numberToFind > answer) ? "grand" : "petit";
                    JOptionPane.showMessageDialog(this, "Raté! Le nombre à deviner est plus " + position );
                    this.chance.setText("x" + engine.getPlayer1().getEssais() + "");
                    if(engine.getPlayer1().getEssais() <= this.ESSAIS /2){
                        jLabel10.setText("Indice : "+ engine.giveIndice());
                    }
                    break;
                case GameEngine.FINISH:
                    JOptionPane.showMessageDialog(this, "Score final : " + engine.getPlayer1().getScore());
                    break;
            }
        } else {
            if (isPlayer1Turn) {
                try {
                    //Partie selon le joueur 1
                    response = engine.validate(answer, GameEngine.PLAYER1_TYPE);
                } catch (IOException ex) {
                    Logger.getLogger(GameScreen.class.getName()).log(Level.SEVERE, null, ex);
                }
                switch (response) {
                    case GameEngine.SUCCESS: //en cas de réussite
                        JOptionPane.showMessageDialog(this, "Trouvé!");
                        engine.generateNumber(this.minRange, this.getMaxRange(engine.getGameMode()));
                        this.player1Score.setText(engine.getPlayer1().getScore() + "");
                        engine.getPlayer1().setEssais(this.ESSAIS);
                        engine.getPlayer2().setEssais(this.ESSAIS);
                        this.chancesJ2.setText(engine.getPlayer2().getEssais() + "");
                        this.chance.setText(engine.getPlayer1().getEssais() + "");
                        break;
                    case GameEngine.FAIL:
                        String position = (engine.numberToFind > answer) ? "plus" : "moins";
                        JOptionPane.showMessageDialog(this, "Raté! Le nombre à deviner est " + position + " grand");
                        this.chance.setText(engine.getPlayer1().getEssais() + "");
                        break;
                    case GameEngine.FINISH:
                        engine.getPlayer1().setEnded(true);
                        if (engine.getPlayer2().isEnded() == true) {
                            StringBuilder finalMessage = new StringBuilder();
                            finalMessage.append("Score final joueur 1 : ").append(engine.getPlayer1().getScore()).append("\n");
                            finalMessage.append("Score final joueur 2 : ").append(engine.getPlayer2().getScore()).append("\n");
                            String winner;
                            if (engine.getPlayer1().getScore() > engine.getPlayer2().getScore()) {
                                winner = engine.getPlayer1().getName();
                            } else if (engine.getPlayer1().getScore() == engine.getPlayer2().getScore()) {
                                winner = "Les deux joueurs sont à égalité.";
                            } else {
                                winner = engine.getPlayer2().getName();
                            }
                            finalMessage.append("Gagnant : ").append(winner);
                            JOptionPane.showMessageDialog(this, finalMessage);
                            parent.setContentPane(new MainPanel(parent));
                        }
                        JOptionPane.showMessageDialog(this, "Score final : " + engine.getPlayer1().getScore());
                        break;
                }
                isPlayer1Turn = !isPlayer1Turn;
                jLabel8.setText("Au tour du joueur 2");
            } else {
                try {
                    response = engine.validate(answer, GameEngine.PLAYER2_TYPE);
                } catch (IOException ex) {
                    Logger.getLogger(GameScreen.class.getName()).log(Level.SEVERE, null, ex);
                }
                switch (response) {
                    case GameEngine.SUCCESS: //en cas de réussite
                        JOptionPane.showMessageDialog(this, "Trouvé!");
                        engine.generateNumber(this.minRange, this.getMaxRange(engine.getGameMode()));
                        this.scoreJ2.setText(engine.getPlayer2().getScore() + "");
                        engine.getPlayer2().setEssais(this.ESSAIS);
                        engine.getPlayer1().setEssais(this.ESSAIS);
                        break;
                    case GameEngine.FAIL:
                        String position = (engine.numberToFind > answer) ? "plus" : "moins";
                        JOptionPane.showMessageDialog(this, "Raté! Le nombre à deviner est " + position + " grand");
                        this.chancesJ2.setText(engine.getPlayer2().getEssais() + "");
                        this.chance.setText(engine.getPlayer1().getEssais() + "");
                        break;
                    case GameEngine.FINISH:
                        engine.getPlayer2().setEnded(true);
                        if (engine.getPlayer1().isEnded() == true) {
                            StringBuilder finalMessage = new StringBuilder();
                            finalMessage.append("Score final joueur 1 : ").append(engine.getPlayer1().getScore()).append("\n");
                            finalMessage.append("Score final joueur 2 : ").append(engine.getPlayer2().getScore()).append("\n");
                            String winner;
                            if (engine.getPlayer1().getScore() > engine.getPlayer2().getScore()) {
                                winner = engine.getPlayer1().getName();
                            } else if (engine.getPlayer1().getScore() == engine.getPlayer2().getScore()) {
                                winner = "Les deux joueurs sont à égalité.";
                            } else {
                                winner = engine.getPlayer2().getName();
                            }
                            finalMessage.append("Gagnant : ").append(winner);
                            JOptionPane.showMessageDialog(this, finalMessage);
                            parent.setContentPane(new MainPanel(parent));
                        }
                        break;
                }
                isPlayer1Turn = !isPlayer1Turn;
                jLabel8.setText("Au tour du joueur 1");
            }
        }
        jTextField1.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel chance;
    private javax.swing.JLabel chancesJ2;
    private javax.swing.JLabel combosJ2;
    private javax.swing.JLabel indicationMessage;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel player1Score;
    private javax.swing.JPanel player2Panel;
    private javax.swing.JLabel playerName;
    private javax.swing.JLabel playerTwoName;
    private javax.swing.JLabel scoreJ2;
    // End of variables declaration//GEN-END:variables
}
